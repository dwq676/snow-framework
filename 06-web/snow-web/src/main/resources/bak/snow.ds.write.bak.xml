<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee-3.2.xsd">

    <!--读取外部的属性文件配置参数 -->
    <context:property-placeholder location="classpath:bak/druid.ds.properties"/>

    <bean id="druidWriteDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
       <!-- <property name="driverClassName" value="${snow.druid.db.driver}"/>-->
        <property name="url" value="${snow.druid.db.write.url}"/>
        <property name="username" value="${snow.druid.db.username}"/>
        <property name="password" value="${snow.druid.db.password}"/>

        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${snow.druid.initialSize}"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${snow.druid.maxActive}"/>
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="${snow.druid.maxIdle}"/>

        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${snow.druid.minIdle}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${snow.druid.maxWait}"/>
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${snow.druid.removeAbandoned}"/>

        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${snow.druid.removeAbandonedTimeout}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${snow.druid.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${snow.druid.minEvictableIdleTimeMillis}"/>

        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。
        如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不起其作用。 -->
        <property name="validationQuery" value="${snow.druid.db.validationQuery }"/>

        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于
             timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="${snow.druid.testWhileIdle}"/>

        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${snow.druid.testOnBorrow}"/>

        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${snow.druid.testOnReturn}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${snow.druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${snow.druid.maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                监控统计用的filter:stat
                日志用的filter:log4j
                防御sql注入的filter:wall -->
        <property name="filters" value="${snow.druid.filters}"/>
    </bean>
    <!-- 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidWriteDataSource"></property>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>